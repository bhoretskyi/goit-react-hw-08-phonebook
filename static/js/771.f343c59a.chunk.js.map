{"version":3,"file":"static/js/771.f343c59a.chunk.js","mappings":"qNAEaA,EAAeC,EAAAA,GAAAA,OAAH,sN,uCCAZC,GAAaD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,0GAOVD,EAAeC,EAAAA,GAAAA,OAAH,+NAaZG,GAAcH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,+O,6BCflBK,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,kBACPC,QAAQ,yHAA8D,uBACtEC,SAAS,cAIDC,EAAW,WACtB,IAAMC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IAE5BC,GAAWC,EAAAA,EAAAA,MAGXC,EAAe,SAAAC,GACnB,IAAMC,EAAU,CACdC,IAAIC,EAAAA,EAAAA,MACJf,KAAMY,EAAMZ,KACZgB,OAAQJ,EAAMI,QAMhB,GAJgBX,EAASY,MACvB,qBAAGjB,KAAgBkB,gBAAkBL,EAAQb,KAAKkB,aAAlD,IAIA,OAAOC,MAAM,GAAD,OAAIN,EAAQb,KAAZ,6BAGdS,GAASW,EAAAA,EAAAA,IAAWP,GAChB,EACN,OACE,0BACE,SAAC,KAAD,CACEQ,cAAe,CAAErB,KAAM,GAAIgB,OAAQ,GAAIC,KAAM,IAC7CK,SAAUX,EACVY,QAASZ,EACTa,iBAAkB3B,EAJpB,UAME,UAACJ,EAAD,YACE,qCAEE,SAACE,EAAD,CAAaK,KAAK,OAAOyB,KAAK,UAC9B,SAAC,KAAD,CAAczB,KAAK,aAErB,uCAEE,SAACL,EAAD,CAAaK,KAAK,SAASyB,KAAK,SAChC,SAAC,KAAD,CAAczB,KAAK,eAGrB,SAAC,EAAD,CAAcyB,KAAK,SAAnB,+BAKT,EC5DYC,EAAelC,EAAAA,GAAAA,MAAH,+O,UCMZmC,EAAgB,WACzB,IAAMlB,GAAWC,EAAAA,EAAAA,MACXkB,GAAStB,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMqB,MAAV,IAChC,OACE,0BACE,gDAEE,SAACF,EAAD,CACED,KAAK,OACLI,MAAOD,EACPE,SAAU,SAAAC,GAAC,OAAItB,GAASuB,EAAAA,EAAAA,GAAUD,EAAEE,OAAOJ,MAAMK,QAAtC,QAKpB,ECdY,SAASC,IACtB,IAAM9B,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IAC5BoB,GAAStB,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMqB,MAAV,IAE1BnB,GAAWC,EAAAA,EAAAA,OAQjB0B,EAAAA,EAAAA,YAAU,WACR3B,GAAS4B,EAAAA,EAAAA,MACV,GAAE,CAAC5B,IAMJ,OACE,4BAEA,uCACG,SAACL,EAAD,KAEA,4BACE,sCACA,SAACuB,EAAD,QAGL,wBAvBOtB,EAASuB,QAAO,qBAAG5B,KACnBkB,cAAcoB,SAASV,EAAOV,cADd,IAwBKqB,KAAI,SAAA1B,GAAO,OACnC,2BACE,yBACGA,EAAQb,KADX,KACmBa,EAAQ2B,UAE3B,SAACjD,EAAD,CAAckD,QAAS,kBArBP3B,EAqB6BD,EAAQC,QApB3DL,GAASiC,EAAAA,EAAAA,IAAc5B,IADD,IAAAA,CAqBO,EAAvB,sBAJOD,EAAQC,GADkB,QAa1C,C","sources":["components/ContactList/ContactList.styled.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/ContactFilter/ContactFilter.styled.jsx","components/ContactFilter/ContactFilter.jsx","components/ContactList/ContactList.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const StyledButton = styled.button`\n  background-color: white;\n  padding: 8px 16px;\n\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n","import { Form, Field } from \"formik\";\nimport { styled } from \"styled-components\";\nexport const StyledForm = styled(Form)`\nmargin: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n\n`\nexport const StyledButton = styled.button`\nwidth: 150px;\n    background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`\nexport const StyledField = styled(Field)`\nmargin-left:10px;\nmargin-right:10px;\npadding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 16px;\n  width: 30%;\n  box-sizing: border-box;\n  &:focus {\n    border-color: #0056b3;}\n    \n`","import { Formik, ErrorMessage } from 'formik';\nimport { StyledButton, StyledField, StyledForm } from './Form.styled';\nimport * as Yap from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/Contacts/contactOperations';\n\nconst FindSchema = Yap.object().shape({\n  name: Yap.string()\n    .min(2, 'too short name')\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, 'Invalid name format')\n    .required('required'),\n \n});\n\nexport const UserForm = () => {\n  const contacts = useSelector(state => state.contacts.items);\n\n  const dispatch = useDispatch();\n  \n\n  const handleSubmit = event => {\n    const contact = {\n      id: nanoid(),\n      name: event.name,\n      number: event.number,\n    };\n    const isExist = contacts.find(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (isExist) {\n      return alert(`${contact.name} is already in contacts.`);\n    }\n\n    dispatch(addContact(contact));\n    ;  };\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: '', number: '', find: '' }}\n        onSubmit={handleSubmit}\n        onReset={handleSubmit}\n        validationSchema={FindSchema}\n      >\n        <StyledForm>\n          <label>\n            Name\n            <StyledField name=\"name\" type=\"text\"></StyledField>\n            <ErrorMessage name=\"name\" />\n          </label>\n          <label>\n            Number\n            <StyledField name=\"number\" type=\"tel\"></StyledField>\n            <ErrorMessage name=\"number\" />\n          </label>\n\n          <StyledButton type=\"submit\">Add contact</StyledButton>\n        </StyledForm>\n      </Formik>\n    </div>\n  );\n};\n","import { styled } from \"styled-components\"\n\nexport const StyledFilter = styled.input`\nmargin-left:10px;\nmargin-right:10px;\npadding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 16px;\n  width: 30%;\n  box-sizing: border-box;\n  &:focus {\n    border-color: #0056b3;}\n    \n`","import { StyledFilter } from \"./ContactFilter.styled\";\n// import { updateFilter } from \"redux/contactSlise\";\nimport { useDispatch,useSelector } from \"react-redux\";\nimport { setFilter } from \"redux/filterSlice\";\n\n\n\n\nexport const ContactFilter = () => {\n    const dispatch = useDispatch()\n    const filter = useSelector(state => state.filter)\n    return (\n      <div>\n        <label>\n          Filter by name:\n          <StyledFilter\n            type=\"text\"\n            value={filter}\n            onChange={e => dispatch(setFilter(e.target.value.trim()))}\n          />\n        </label>\n      </div>\n    );\n  };","import { StyledButton } from './ContactList.styled';\nimport { fetchContacts, deleteContact } from 'redux/Contacts/contactOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { UserForm } from '../Form/Form';\nimport { ContactFilter } from '../ContactFilter/ContactFilter';\n\n\n\nexport default function ContactList () {\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n\n  const dispatch = useDispatch();\n\n  const selectFilteredContacts = () => {\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <div>\n    \n    <h1>Phonebook</h1>\n       <UserForm />\n\n       <div>\n         <h2>Contacts</h2>\n         <ContactFilter />\n\n      </div>\n    <ul>\n      {selectFilteredContacts().map(contact => (\n        <li key={contact.id}>\n          <p>\n            {contact.name}: {contact.phone}\n          </p>\n          <StyledButton onClick={() => onDeleteContact(contact.id)}>\n            Delete\n          </StyledButton>\n        </li>\n      ))}\n    </ul>\n    </div>\n  );\n};\n"],"names":["StyledButton","styled","StyledForm","Form","StyledField","Field","FindSchema","Yap","shape","name","min","matches","required","UserForm","contacts","useSelector","state","items","dispatch","useDispatch","handleSubmit","event","contact","id","nanoid","number","find","toLowerCase","alert","addContact","initialValues","onSubmit","onReset","validationSchema","type","StyledFilter","ContactFilter","filter","value","onChange","e","setFilter","target","trim","ContactList","useEffect","fetchContacts","includes","map","phone","onClick","deleteContact"],"sourceRoot":""}